#+TITLE: GNU Guix reproducible software deployment

* Table of Contents                                                     :TOC:
 - [[#introduction][Introduction]]
 - [[#reproducible-software-deployment-][Reproducible software deployment ]]
   - [[#git-checkout-of-gnu-guix-repository][Git checkout of GNU Guix repository]]
   - [[#set-up-an-authoritative-git][Set up an authoritative git]]
 - [[#using-gnu-guix-archive][Using GNU Guix archive]]
   - [[#generate-the-key][Generate the key]]
 - [[#introducing-a-gnu-guix-caching-server][Introducing a GNU Guix caching server]]
   - [[#set-up-server][Set up server]]
   - [[#use-server][Use server]]

* Introduction

In this document I will describe how to have reproducible software
deployment with GNU Guix adding a caching server for binaries.

GNU Guix gives full control over the software dependency graph. This
is because Guix is a declarative software deployment system, unlike,
for example, Debian, Docker and Brew which give different results
depending on the *order* of installation and the *time* of
installation. Guix has none of that. You get what you expect. More
can be read about this in [[SYSCONFIG.org]].

Out of the box, GNU Guix supports rolling upgrades. I.e., when you do
a 'guix pull' it will install the latest and the greatest - matching
the state of the build-farm at that point. Because GNU Guix packages
are isolated, i.e., packages can not overwrite each other or their
dependencies, it is perfectly safe.

But, this is not always what we want. Especially for production-type
systems and software development we need to control what versions of
software are *exactly* running.

Here we describe how to recreate the same software stack every time. Basically,

1. Use a checked out git repository of GNU Guix packages
2. The checked out git HASH value defines the origin of the dependency graph
3. Build software of fetch binary substitutes against that git repo/graph

And next to create a caching server

1. Create a key for the server
2. Publish the server on the network
3. Tell your machines to use the server for substitute binaries

It is all rather simple, really. 

A side-effect of taking this approach is that you'll spend less time
downloading and installing large binaries. GNU Guix can be quite heavy
in its use of bandwidth if you opt for rolling upgrades.

* Reproducible software deployment 
** Git checkout of GNU Guix repository

The entry point for the reproducible software graph, at this point, is
handled via a git checkout of the Guix package repository. Follow the
guidelines in [[INSTALL.org]] to get a git checkout and make of the
repository. You should be able to run

: ./pre-inst-env guix package -A

At this point your source repo defines your graph. So if you do a `git
log' you can see the SHA value which is the current version of your
guix git repo/graph, e.g.

: commit 96250294012c2f1520b67f12ea80bfd6b98075a2

Anywhere you install software this SHA value you will get the exact
same result. For example using this version of the git repo/graph

: ./pre-inst-env guix package -A ruby

Will install the exact same Ruby, for x86_64 this can be

: /gnu/store/pgks1l9cl696j34v9mb35lk8x6lac3b0-ruby-2.2.4

In fact, the only external non-Guix dependency is the Linux kernel API
which, fortunately, does not change much. There is no (external) glibc
dependency because glibc is *part* of the graph. GNU Guix comes with
its own dependencies (i.e., batteries included).

** Set up an authoritative git

For our deployment we set up a git server somewhere which contains the
tree that gets used to deploy software in a reproducible way. Git
branches can be helpful when dealing with different deployment
versions.

* Using GNU Guix archive

With the archive option a package with all its dependencies can be
copied from one machine to another. For rapid reproducible deployment
this can be a useful method.

** Generate the key

First, as root, generate a key for the machine:

: guix archive --generate-key

Note this can take forever on a server without a [[https://bugs.launchpad.net/ubuntu/+source/gnupg/+bug/706011][keyboard]] so you may
want to generate a key on a local machine and copy it
across. Depending on how Guix was installed the key may be stored in
/etc/guix/ or /usr/local/etc/guix/, e.g., cat
/usr/local/etc/guix/signing-key.pub

#+begin_src scheme
    (public-key 
     (ecc 
      (curve Ed25519)
      (q #11217788B41ADC8D5B8E71BD87EF699C65312EC387752899FE9C888856F5C769#)))
#+end_src scheme

Then create a signed tar ball with

: guix archive --export -r ruby > guix_ruby.nar

The NAR file is a 200Mb archive which contains the Ruby binary *with*
all its runtime dependencies. Next on a new machine you can unpack
it with

: guix archive --import < guix_ruby.nar

* Introducing a GNU Guix caching server

Thanks to Florian Paul Schmidt I now know how to set up a public
facing caching server for GNU Guix binaries. Make sure to
run a recent guix daemon.

** Set up server

1. Generate a key pair for the guix-publish service
2. Add the guix-publish service to your services (and reconfigure your system)
3. Either build or pull all the packages you want:
4. Get a git checkout of the guix repository as described in [[INSTALL.org]].
5. Checkout the revision you want (check tags and branches)
6. Build it

Then you need to add software to the cache by either (a)

#+begin_src sh   :lang bash
for n in `./pre-inst-env guix packages -A | cut -f1`; do
  ./pre-inst-env guix build "$n"; done
#+end_src

or (b)

#+begin_src sh   :lang bash
for n in `./pre-inst-env guix packages -A | cut -f1`; do
  ./pre-inst-env guix --no-substitutes build "$n"; done
#+end_src

(a) pulls packages available from hydra, (b) tries to
rebuild them all. You can mix the two.

These for-loops will fail altogether if a single build fails. This is
probably not what you want. So try

#+begin_src sh   :lang bash
for n in `./pre-inst-env guix packages -A | cut -f1`; do
  ./pre-inst-env guix build "$n" || true; done
#+end_src

And you might also want to look into the --cache-failures option for
the guix-daemon. And instead of just using a for-loop you might
want to use gnu parallel or something.

** Use server

Example for http://fps.io:9999

The public key is

#+begin_src scheme
(public-key
  (ecc
    (curve Ed25519)
      (q #AFF68C4E099401E85BE2D7375C1DB5E8A29F1DB83299038122AF5C0984099CF8#)))
#+end_src scheme
  
Run 

: sudo guix archive --authorize

Paste in the scheme expression for the key above and finish with
ctrl-d. After that you can use e.g.

: guix package -i boost --substitute-urls="http://fps.io:9999"

Or use it with the guix-daemon using hydra as a fallback

: guix-daemon --build-users-group=guixbuild --substitute-urls="http://fps.io:9999 http://hydra.gnu.org"

(for multiple substitutes to work make sure you are running Guix > 0.9)
