#+TITLE: Installing GNU Guix

* Table of Contents                                                     :TOC:
 - [[#introduction][Introduction]]
 - [[#install-in-conjunction-with-another-package-manager][Install in conjunction with another package manager]]
 - [[#binary-installation][Binary installation]]
   - [[#the-one-step-tarball-installation][The one-step tarball installation]]
   - [[#from-an-existing-gnu-guix-installation][From an existing GNU Guix installation]]
 - [[#create-build-group-and-users][Create build group and users]]
 - [[#set-the-store-permissions][Set the store permissions]]
 - [[#start-the-gnu-guix-daemon][Start the GNU Guix daemon]]
 - [[#set-the-key][Set the key]]
 - [[#update-the-package-list-guix-pull][Update the package list (guix pull)]]
 - [[#use-guix-as-a-normal-user][Use guix as a normal user]]
 - [[#install-the-hello-package][Install the hello package]]
 - [[#add-symlinks-to-the-path][Add symlinks to the PATH]]
 - [[#set-locale][Set locale]]
 - [[#sysv-startup-of-guix-daemon][SysV startup of Guix daemon]]
 - [[#other-installation-routes-building-guix-from-source][Other installation routes (building Guix from source)]]
   - [[#before-you-try-read-this][Before you try, read this]]
   - [[#install-repository-from-git][Install repository from git]]
   - [[#bootstrap-from-source][Bootstrap from source]]
   - [[#building-gnu-guix-from-source-using-guix][Building GNU Guix from source (using Guix)]]
   - [[#building-gnu-guix-from-source-debian-native][Building GNU Guix from source (Debian native)]]
   - [[#bootstrap-with-nix][Bootstrap with Nix]]
   - [[#bootstrap-with-docker][Bootstrap with Docker]]
 - [[#continue-with-ruby-installation-and-environment][Continue with Ruby installation and environment]]
 - [[#continue-with-python-installation-and-environment][Continue with Python installation and environment]]
 - [[#add-your-own-package][Add your own package]]

* Introduction

*NEWS FLASH*: GNU Guix can be installed in one go on most Linux installations!
 
See the [[#the-one-step-tarball-installation][The one-step tarball installation]] below

Software packaging is part of the programmer's toolbox. First and
foremost, for development you need a dependable and reproducable
environment. Second, to deploy software and test it you want
dependable and reproducable environments.  Few existing software
package management systems can guarantee that.

GNU Guix is a next generation software package installer with a range
of features, including sane dependency handling, transactional and
reproducable installs which can be rolled back. In short, GNU Guix has
resolved the fundamental problems of software deployment and
management.

Here we list the fundamental Guix bootstrap options, and run through
post-build installation.

Note that GuixSD is a fully blown Linux distribution in its own right.
I find, however, that at this point I prefer a hybrid Debian/Guix
system. GNU GuixSD is maturing fast, so you may want to give that a
shot instead.

* Install in conjunction with another package manager

It is to be expected that sometime the major package managers will
install GNU Guix out of the box. Similar to allowing Docker, Perl or
Python software packagers, there should be no exception for the GNU
package manager. In fact, the GNU Guix is less intrusive than the
others, since it does not install software in the same directories as
the underlying package manager (such as apt or rpm). But, until the
Linux distributions decide to include GNU Guix, we'll have to use one
of the other following options to install Guix inside an existing
distribution.

* Binary installation

A binary install is easy because all properly installed Guix packages
are independent from the underlying distribution - a package can be
created which contains a software with all its dependencies. The only
real dependency is the (Linux) kernel. The fundamental Linux API does
not change that often so a binary distribution can be copied from
machine to machine. Of course, also the build target archicture has to
match.  With a binary distribution it is possible to simply unpack the
package, create the build group and permissions.

** The one-step tarball installation

Ricardo has written a nice [[http://elephly.net/posts/2015-06-21-getting-started-with-guix.html][introduction]]. Also the [[https://www.gnu.org/software/guix/download/][guix documentation]]
may be more up-to-date. There may also be Docker images

In principle, fetch the binary tar ball and unpack it in the root
directory

#+begin_src sh   :lang bash
    tar -C / --xz -xvf guix-binary-0.9.0.x86_64-linux.tar.xz 
#+end_src sh   :lang bash

Add the guix-profile to the path

#+begin_src sh   :lang bash
    export PATH=~/.guix-profile/bin:$PATH
#+end_src sh   :lang bash
	
Start the daemon after creating the
build users as described below. 

** From an existing GNU Guix installation

I thought I would be able to bootstrap using a USB image and copy
that to a local hard disk.

To bootstrap I have successfully downloaded a GNU Guix tarball 

#+begin_src sh   :lang bash
    wget http://alpha.gnu.org/gnu/guix/gnu-usb-install-0.8.1.x86_64-linux.xz
    xz -d gnu-usb-install-0.8.x86_64-linux.xz 
#+end_src sh   :lang bash
	
mount it with kpartx

#+begin_src sh   :lang bash
    kpartx -v -a gnu-usb-install-0.8.1.x86_64-linux
    mkdir mnt 
    mkdir tmp
    mount /dev/mapper/loop0p1 mnt
    cp -vau mnt/gnu tmp
    mv tmp/gnu/ /
#+end_src sh   :lang bash

* Create build group and users

Now we have the /gnu/store in place we need to create a group and
users with build permissions for the Guix daemon. In bash

#+begin_src sh   :lang bash
    builders=10
    groupadd guixbuild
    for i in `seq 1 $builders`; do
        useradd -g guixbuild -G guixbuild           \
            -d /var/empty -s `which nologin`          \
            -c "Guix build user $i" --system          \
            guix-builder$i;
    done
#+end_src sh   :lang bash

(set the number of builders to the number of cores).

Also the store comes with meta-data in the form of a sqlite
database. This sits in /var/guix. Copy also this directory to the new
system before running guix.

* Set the store permissions

This part is normally done automatically by the guix-daemon

#+begin_src sh   :lang bash
    chgrp guixbuild -R /gnu/store
    chmod 1775 /gnu/store
#+end_src sh   :lang bash

* Start the GNU Guix daemon

Now you should be able to run Guix daemon and client directly from the store

#+begin_src sh   :lang bash
    /gnu/store/(...)-guix-(...)/bin/guix-daemon --build-users-group=guixbuild
#+end_src sh   :lang bash

and you should be able to use the client also from the store

#+begin_src sh   :lang bash
    /gnu/store/(...)-guix-(...)/bin/guix --help
#+end_src sh   :lang bash

Until /root/.guix-profile has been set, you may want to use this path directly.
The Guix documentation suggests symlinking to /usr/local/bin, but this may confuse 
later work. 

I first set the key and do a guix pull as discussed below.

* Set the key

To enable binary installs you need to authorize it with a key which can 
be found with guix

#+begin_src sh   :lang bash
  guix archive --authorize < ~/.guix-profile/share/guix/hydra.gnu.org.pub 
#+end_src sh   :lang bash

Note that you can also call GNU Guix from its direct path, e.g.

#+begin_src sh   :lang bash
  /gnu/store/8lays(...)-guix-0.8.47739f5/bin/guix archive --authorize < /gnu/store/8lay(...)-guix-0.8.47739f5/share/guix/hydra.gnu.org.pub
#+end_src sh   :lang bash

* Update the package list (guix pull)

#+begin_src sh   :lang bash
   guix pull
#+end_src sh   :lang bash
   
downloads the latest Guix source code and package descriptions, and
deploys it.  Update guix (do this as root so the daemon does not get
garbage collected later).

#+begin_src sh   :lang bash
   guix package -i guix
#+end_src sh   :lang bash

you may want to restart the daemon after a successful upgrade.

* Use guix as a normal user

As a normal user you can now install software (see below install the
hello package). Guix will ask you to install a dir for the user in
/var/guix/profiles/per-user/. As root

: mkdir /var/guix/profiles/per-user/pjotr
: chown pjotr /var/guix/profiles/per-user/pjotr

Now run guix the first time from the store (using the path that the
root version of guix has) and install guix client itself

: su pjotr
: /gnu/store/(...)guix(...)/bin/guix package -i guix

and update the path

: export PATH=$HOME/.guix-profile/bin:$PATH
: which guix

* Install the hello package

#+begin_src sh   :lang bash
  guix package -i hello

    The following package will be installed:      
      hello-2.9    out     /gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9
    The following file will be downloaded:
      /gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9
    found valid signature for '/gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9', from 'http://hydra.gnu.org/nar/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9'
    downloading `/gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9' from `http://hydra.gnu.org/nar/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9' (0.2 MiB installed)...
    http://hydra.gnu.org/nar/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9       43.0 KiB transferred2 packages in profile
#+end_src sh   :lang bash

did a binary install of the hello package. A symlink was created in
~/.guix-profile/bin/ pointing to
/gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9/bin/hello.

Note that you have the great luxury of interrupting GNU Guix at any
point during build and installation. That is because it is TRANSACTION
SAFE!

Another luxury is that you can copy packages from one dir/machine to
another. It is SAFE because each package is isolated from
another. Note: you may need to copy the dependencies too.

* Add symlinks to the PATH

After adding to the path

#+begin_src sh   :lang bash
  export PATH=$HOME/.guix-profile/bin:$PATH
#+end_src sh   :lang bash

we can run 

#+begin_src sh   :lang bash
  hello

    Hello, world!
#+end_src sh   :lang bash

Since GNU Guix development revolves around guile (the Scheme programming language) and emacs, let us 
install

#+begin_src sh   :lang bash
  guix package -i guile
  guix package -i emacs
#+end_src sh   :lang bash

in both cases I got a successful install for guile and emacs.
  
To build a package from source, checkout the repository with git and run

#+begin_src sh   :lang bash
  ./pre-inst-env guix build hello
#+end_src sh   :lang bash

downloaded a few more packages for building and compiled a new hello. This time with a different
path, presumably because these are different dependencies. This we can check:

#+begin_src sh   :lang bash
  guix gc --references $(guix build hello)

    /gnu/store/1qf4rsznfhvdis39jzdmx0dfjy2jwzgz-gcc-4.8.3-lib
    /gnu/store/scmy8hnpccld0jszbgdw5csdc9z8f9jf-glibc-2.19
    /gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9
#+end_src sh   :lang bash

To get the other one

#+begin_src sh   :lang bash
  guix gc --references /gnu/store/77dzhv9yx5x2rq370swp8scsps961pj6-hello-2.9  

    /gnu/store/3h38sfay2f02rk4i768ci8xabl706rf9-glibc-2.20
    /gnu/store/px5ks6hyjszqp269l9b91354zjclv6c2-gcc-4.8.3-lib
    /gnu/store/77dzhv9yx5x2rq370swp8scsps961pj6-hello-2.9
#+end_src sh   :lang bash

And you can tell that the dependencies are not the same. It gets better. You can list the 
build depencies too

#+begin_src sh   :lang bash
  guix gc --requisites /gnu/store/77dzhv9yx5x2rq370swp8scsps961pj6-hello-2.9

    /gnu/store/2sflarfdfpcjkywy4hwknwrwxmx4rrhi-glibc-2.20-locales
    /gnu/store/px5ks6hyjszqp269l9b91354zjclv6c2-gcc-4.8.3-lib
    /gnu/store/3h38sfay2f02rk4i768ci8xabl706rf9-glibc-2.20
    /gnu/store/77dzhv9yx5x2rq370swp8scsps961pj6-hello-2.9
#+end_src sh   :lang bash

How many package managers can achieve that?

* Set locale

If you see the message 

   warning: failed to install locale: Invalid argument

it means your locale needs to be found. Guix comes with a locale database

#+begin_src sh   :lang bash
   guix package -i glibc-utf8-locales
#+end_src sh   :lang bash

and more locales with local glibc support

#+begin_src sh   :lang bash
   guix package -i glibc-locales
#+end_src sh   :lang bash

Set the GUIX_LOCPATH

#+begin_src sh   :lang bash
    export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale
#+end_src sh   :lang bash

Choose one from

#+begin_src sh   :lang bash
   ls $GUIX_LOCPATH/2.22/
   export LC_ALL=en_US.UTF-8
#+end_src sh   :lang bash

Alternatively set the LOCPATH to that of your underlying
distribution - though incompatibilities may exist.

* SysV startup of Guix daemon

Guix comes with a script for systemd. For SysV's startup I use /etc/init.d/guix-daemon which
looks like

#+begin_src sh   :lang bash
#!/bin/sh
### BEGIN INIT INFO
# Provides:          guix-daemon
# Required-Start:    mountdevsubfs
# Required-Stop:
# Should-Start:      
# Should-Stop:       
# X-Start-Before:    
# X-Stop-After:      
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO

SCRIPTNAME=/etc/init.d/guix-daemon

. /lib/lsb/init-functions

[ -x /root/.guix-profile/bin/guix-daemon ] || exit 0

do_start()
{
        # /root/.guix-profile/bin/guix-daemon --build-users-group=guixbuild 2>/dev/null || return 2
        /root/.guix-profile/bin/guix-daemon --build-users-group=guixbuild 2> /var/log/guix.log &
}

case "$1" in
  start)
        log_action_begin_msg "Setting up GNU Guix daemon"
        do_start
        case "$?" in
                0|1) log_action_end_msg 0 ;;
                2) log_action_end_msg 1 ;;
        esac
        ;;
  stop|restart|force-reload|status)
        log_action_begin_msg "Killing GNU Guix daemon"
        killall guix-daemon
        ;;
  *)
        echo "Usage: $SCRIPTNAME start" >&2
        exit 3
        ;;
esac
#+end_src sh   :lang bash

and (on Debian)

: update-rc.d guix-daemon defaults

* Other installation routes (building Guix from source)
** Before you try, read this

Note that above guix tarball binary installation is by far the easiest
if your package manager does not support Guix by default. Every
distribution contains its own dependencies which may interfere with a
Guix source install. But then, some of us are more adventurous than
others and you may need the git tree to package new software and work
on reproducible builds.

** Install repository from git

Use one of https://savannah.gnu.org/git/?group=guix and clone with
sub modules:

: git clone --recurse git://git.savannah.gnu.org/guix.git 

when updating

: git pull --recurse-submodules git-URI

** Bootstrap from source

Bootstrapping from source, after checking out the git Guix source tree
can be surprisingly tricky because of the build dependencies. Your
mileage may vary, but currently I recommend starting from the tar-ball
install described above instead and build Guix using Guix tools.

For building from source I found it to be important to make sure not to 
*mix* Guix and native dependencies. Also make sure you are using the
proper localstatedir.

** Building GNU Guix from source (using Guix)

This is my recommended route for building from source.

You can re-build and re-install Guix using a system that already runs Guix.
To do so (copied from the Guix README). After the binary tar install 
described above:

*** Install the dependencies and build tools using Guix:

Display the search paths and set them, e.g.

#+begin_src sh   :lang bash
guix package --search-paths
export PATH="$HOME/.guix-profile/bin:$HOME/.guix-profile/sbin"
export INFOPATH="$HOME/.guix-profile/share/info"
#+end_src sh   :lang bash

Note that if you want full isolation you may want to use 'guix
environment', but here we opt for the lazy version. E.g.

#+begin_src sh   :lang bash
   guix package --install autoconf automake bzip2 gcc-toolchain gettext \
                          guile libgcrypt pkg-config sqlite m4 make
#+end_src sh   :lang bash

I also run

#+begin_src sh   :lang bash
    guix package --install grep sed texinfo graphviz \
      binutils coreutils xz tar findutils gawk git
#+end_src sh   :lang bash

which may be used during build time.

Arguably, you may want to create a special (isolated) build profile
using -p and add that to your PATH instead. I use -p
$HOME/opt/guix-build-system so the full thing becomes (with some
additional tools I use)

#+begin_src sh   :lang bash
   mkdir $HOME/opt
   guix package -p $HOME/opt/guix-build-system --install autoconf \
      automake bzip2 gcc-toolchain gettext guile libgcrypt \
      pkg-config sqlite m4 make grep sed texinfo graphviz bash \
      help2man binutils coreutils xz tar findutils gawk git less \
      time which diffutils
   export PATH=$HOME/opt/guix-build-system/bin:$PATH
   guix package --search-paths
#+end_src sh   :lang bash

Note: hydra can be slow when many people are using it. The download
should become faster in the near future (it is designed for scalability and
GNU Guix is getting new hardware).

***  Set the Guix environment variables 

Guix recommends you to set during the package installation process: ACLOCAL_PATH, CPATH, LIBRARY_PATH, PKG_CONFIG_PATH

You can view the environment variable definitions Guix recommends with

: guix package --search-paths

or when using a profile

: guix package -p ~/opt/guix-build-system --search-paths

To get rid of the LOCALE errors, do something like

: export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale
: export LC_ALL=en_US.utf8

Mine are (general)

#+begin_src sh   :lang bash
    export PKG_CONFIG_PATH="$HOME/.guix-profile/lib/pkgconfig"
    export GUILE_LOAD_PATH="$HOME/.guix-profile/share/guile/site/2.0"
    export GUILE_LOAD_COMPILED_PATH="$HOME/.guix-profile/share/guile/site/2.0"
    export CPATH="$HOME/.guix-profile/include"
    export LIBRARY_PATH="$HOME/.guix-profile/lib"
    export ACLOCAL_PATH="$HOME/.guix-profile/share/aclocal"
    export CMAKE_PREFIX_PATH="$HOME/.guix-profile/"
    export PYTHONPATH="$HOME/.guix-profile/lib/python2.7/site-packages"
#+end_src sh   :lang bash

Or (for the build system)

#+begin_src sh   :lang bash
export PATH="$HOME/opt/guix-build-system/bin:$HOME/opt/guix-build-system/sbin"
export INFOPATH="$HOME/opt/guix-build-system/share/info"
export PKG_CONFIG_PATH="$HOME/opt/guix-build-system/lib/pkgconfig"
export GUILE_LOAD_COMPILED_PATH="$HOME/opt/guix-build-system/lib/guile/2.0/ccache"
export C_INCLUDE_PATH="$HOME/opt/guix-build-system/include"
export CPLUS_INCLUDE_PATH="$HOME/opt/guix-build-system/include"
export LIBRARY_PATH="$HOME/opt/guix-build-system/lib"
export ACLOCAL_PATH="$HOME/opt/guix-build-system/share/aclocal"
#+end_src sh   :lang bash

*** And build it
	
Re-run the 'configure' script passing it the option
'--with-libgcrypt-prefix=$HOME/.guix-profile/', as well as
'--localstatedir=/somewhere', where '/somewhere' is the
'localstatedir' value of the currently installed Guix (failing to do
that would lead the new Guix to consider the store to be
empty!). E.g.,

#+begin_src sh   :lang bash
    ./configure --with-libgcrypt-prefix=$HOME/.guix-profile \
       --localstatedir=/var
#+end_src sh   :lang bash

or with profile

#+begin_src sh   :lang bash
./configure --with-libgcrypt-prefix=$HOME/opt/guix-build-system \
  --localstatedir=/var
#+end_src sh   :lang bash

If that did not work try recreating configure with bootstrap

#+begin_src sh   :lang bash
    ./bootstrap
    ./configure --with-libgcrypt-prefix=$HOME/.guix-profile --localstatedir=/var
    make clean
    make
#+end_src sh   :lang bash

and if you used a special build profile

#+begin_src sh   :lang bash
./configure --with-libgcrypt-prefix=$HOME/opt/guix-build-system --localstatedir=/var
#+end_src

Run `make' (and optionally `make check') every time you change something in the
repository. Make can do parallel builds so for 4 cores

: make clean ; time make -j 4 

which builds on my machine in 

: real    1m23.808s
: user    3m35.616s
: sys     0m1.624s

Those cores get used well.

You may want to avoid "make install" since it will probably install the guix
binaries in /usr and you can run it in the source dir with

#+begin_src sh   :lang bash
    ./pre-inst-env guix package -A ruby
      ruby    1.8.7-p374      out     gnu/packages/ruby.scm:156:2
      ruby    2.1.8   out     gnu/packages/ruby.scm:123:2
      ruby    2.2.4   out     gnu/packages/ruby.scm:104:2
      ruby    2.3.0   out     gnu/packages/ruby.scm:47:2
      ruby-activesupport      4.2.4   out     gnu/packages/ruby.scm:2466:2
      (... 137 more gems as per Feb 2016 ...)
#+end_src sh   :lang bash

At this point check whether the database path (localstatedir) was correct by checking
what packages it can find and what packages you have installed with

#+begin_src sh   :lang bash
    ./pre-inst-env guix package -I
#+end_src sh   :lang bash

And you can upgrade GNU Guix itself to the latest and greatest with

#+begin_src sh   :lang bash
    ./pre-inst-env guix package -i guix
#+end_src sh   :lang bash

Now you may want to make sure the PATH only points to $HOME/.guix-profile/bin
or, at least, that it comes first.

#+begin_src sh   :lang bash
  export PATH=$HOME/.guix-profile/bin:/usr/bin:/bin
  set|grep guix
#+end_src sh   :lang bash

** Building GNU Guix from source (Debian native)

Before autumn 2014, I was not successful in installing GNU Guix from
source, in fact, to get GNU Guix running on Debian proved surprisingly
hard. But with Guix 0.7 I got a working installation on Debian
(building from the source tarball using Debian packages) and David and
I created the first Ruby package in September 2014.

: Even so, the recommended route is bootstrapping Guix from Guix in 
: Debian (see above section).

To do a Debian install make sure to remove all references to guix in
the PATH and other settings. Use the full native dependencies too
bootstrap from source. I.e.

#+begin_src sh   :lang bash
  export BASH=/bin/bash
  export PATH=/usr/local/bin:/usr/bin:/bin
  set|grep -i guix 
#+end_src sh   :lang bash

With guix 0.7 and 0.8 I have built from source on Debian.

#+begin_src sh   :lang bash
  which guix
      /usr/local/bin/guix

  guix --version
    guix (GNU Guix) 0.8
#+end_src sh   :lang bash

NOTE: When upgrading guix through guix (i.e., 'guix package -i guix')
make sure the same metadata is seen by the new daemon! The old one may
be using the /usr/local prefix, so the metadata will be in
/usr/local/var/guix while the new one may expect the data in
/var/guix. A symlink may solve it.

** Bootstrap with Nix

Bootstrapping with Nix is possible, the package managers are 1st
cousins and use the same backend. The Guix package contained in Nix,
however, may be out of date and perhaps uses /gnu/store instead of
/nix/store. The latter should also work with Guix, but you don't get binary
downloads.

** Bootstrap with Docker

Docker allows isolation of packages. For installing Docker follow the
instructions on http://www.docker.com/. Docker should play well with
Guix, though I have not tried it (yet). There is a description of a 
Docker install [[https://github.com/wurmlab/Dockerfiles/tree/master/guix][online]].

The store /gnu/store can be mounted inside a Docker image. This not
only allows sharing packages between docker images, but also gives the
perspective of using Docker for bootstrapping Guix. 

Note that Guix comes with its own container manager built-in. So you 
may not need Docker after all.

* Continue with Ruby installation and environment

See [[https://github.com/pjotrp/guix-notes/blob/master/RUBY.org][GNU Guix Ruby]]

* Continue with Python installation and environment

See [[https://github.com/pjotrp/guix-notes/blob/master/PYTHON.org][GNU Guix Python]]

* Add your own package

See [[https://github.com/pjotrp/guix-notes/blob/master/HACKING.org][GNU Guix HACKING]]
